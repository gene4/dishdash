datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Ingredient {
  id                       String      @id @default(uuid())
  name                     String
  userId                   String
  vat                      String
  category                 String
  deliveryPrices             DeliveryPrice[] @relation("deliveryPrices")
 

  variantId String?    @unique
  variant   Ingredient?   @relation("ingredientVariant", fields: [variantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentIngredient Ingredient?   @relation("ingredientVariant")

  
  selectedDeliveryPrice      DeliveryPrice?   @relation("selecteDelivery", fields: [selectedDeliveryPriceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  selectedDeliveryPriceId    String?    @unique

  recipes      RecipeIngredient[]
  dishes       DishIngredient[]

}

// model SubIngredient {
//   id                       String      @id @default(uuid())
//   name                     String
//   weightPerPiece           Float?
//   ingredient               Ingredient? @relation(fields: [ingredientId], references: [id])
//   ingredientId             String?
//   deliveryPrices           DeliveryPrice[]


//   @@index([ingredientId])
// }

model DeliveryPrice {
  id           String      @id @default(uuid()) 
  unit         String
  amount       Float
  price        Float
  date         DateTime 

  delivery     Delivery?    @relation(fields: [deliveryId], references: [id])
  deliveryId   String?

  supplier    Supplier?    @relation(fields: [supplierId], references: [id])
  supplierId  String?

  ingredient   Ingredient @relation("deliveryPrices",fields: [ingredientId], references: [id])
  ingredientId String

  // subIngredient   SubIngredient? @relation(fields: [subIngredientId], references: [id])
  // subIngredientId String?

  selectedFor   Ingredient?   @relation("selecteDelivery") 
  
@@index([deliveryId])
@@index([ingredientId])
// @@index([subIngredientId])
@@index([supplierId])
}

model Recipe {
  id              String      @id @default(uuid()) 
  name            String
  userId          String
  unit            String
  yield           Float
 
  ingredients     RecipeIngredient[]
  dishes          DishIngredient[]
  recipes         RecipeIngredient[] @relation("recipeIngredientId")

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RecipeIngredient {
  id              String      @id @default(uuid()) 
  amount          Float

  recipe          Recipe   @relation(fields: [recipeId], references: [id])
  recipeId        String

   ingredient      Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId     String?

   recipeIngredient    Recipe? @relation("recipeIngredientId", fields: [recipeIngredientId], references: [id])
  recipeIngredientId   String? 



@@index([recipeIngredientId])
@@index([ingredientId])
@@index([recipeId])
}




model Dish {
  id              String      @id @default(uuid()) 
  name            String
  userId          String
  menuPrice       Float
  vat             String
  multiplier      Float
  ingredients     DishIngredient[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DishIngredient {
  id              String      @id @default(uuid()) 
  amount          Float

  dish            Dish   @relation(fields: [dishId], references: [id])
  dishId          String

  ingredient      Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId    String?

  recipeIngredient          Recipe? @relation(fields: [recipeIngredientId], references: [id])
  recipeIngredientId        String?

@@index([dishId])
@@index([ingredientId])
@@index([recipeIngredientId])
}

model Supplier {
  id          String      @id @default(uuid()) 
  name        String
  userId      String
  paymentInfo String? @db.Text
  deliveries  Delivery[] 
  deliveryPrices DeliveryPrice[]

  createdAt   DateTime    @default(now())
}

model Delivery {
  id          String      @id @default(uuid()) 
  userId      String
  items       DeliveryPrice[]
  invoiceNr   String?
  date        DateTime 
  fileUrl     String? @db.Text
  fileRef     String? @db.Text
 
  supplier    Supplier    @relation(fields: [supplierId], references: [id])
  supplierId  String

  createdAt   DateTime    @default(now())

  @@index([supplierId])
}